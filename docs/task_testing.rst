Task Unittesting
================

Due to the dynamic nature of the workflow, it's imperative to write unittests for tasks. This can help proactively solve any problems with resolving options.

The **pbsmrtpipe.pb_tasks.tests** python subpackage has several tests and takes ~ second to run.

Stylistically similar to testkit, there's a base class that has class vars that represent the task inputs and outputs.


.. literalinclude:: ../pbsmrtpipe/pb_tasks/tests/test_dev_simple.py
    :language: py


Running
-------

Individual tasks tests (or test classes) can be run using the standard nosetests interface.

.. code-block:: bash

    (dev_pbsmrtpipe_test)pbsmrtpipe $> nosetests  --verbose --logging-config nose.cfg pbsmrtpipe/pb_tasks/tests/test_dev_simple.py
    test_ncommands (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_ncommands_type (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_resolved_nproc (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_resolved_options (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_id (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_options (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_type (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_ncommands (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_ncommands_type (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_resolved_nproc (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_resolved_options (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_id (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_options (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_type (test_dev_simple.TestTestDevSimpleTask) ... ok

    ----------------------------------------------------------------------
    Ran 14 tests in 0.051s

    OK

The log file will be written to report_unittests.log, which will contain details about the dependency injection resolving and will log the actual commands generated by the task.

Run all the tests by running **make test-unit**. Running **make test-sanity** will load all the defined pipelines, tool contracts, and chunk operators. Running **make test-suite** will run the entire test suite.

.. code-block:: bash

    (pbsmrtpipe_test)pbsmrtpipe $> make test-unit
    # snip ...
    test_run_e2e (test_tools_dev_tasks.TestScatterSubreadZMWs) ... SKIP: Missing /mnt/secondary-siv/testdata/SA3-DS
    test_smoke (test_tools_gather.TestCsvGather) ... ok
    test_smoke (test_tools_gather.TestJsonGather) ... ok
    test_01 (test_tools_runner.TestHelloRunnableTask) ... ok
    test_01 (test_tools_runner.TestRunnableTask) ... ok
    test_can_find_and_load_template (test_utils.TestLoadJinjaTemplate) ... ok
    test_bad_which (test_utils.TestUtils) ... SKIP: Unable to find test /mnt/secondary-siv/testdata
    test_which (test_utils.TestUtils) ... SKIP: Unable to find test /mnt/secondary-siv/testdata
    test_version (test_version.TestVersion) ... ok

    ----------------------------------------------------------------------
    XML: /Users/mkocher/gh_mk_projects/pbsmrtpipe/nosetests.xml
    ----------------------------------------------------------------------
    Ran 92 tests in 58.843s

    OK (SKIP=20)

