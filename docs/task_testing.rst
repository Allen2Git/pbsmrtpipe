Task Unittesting
================

Due to the dynamic nature of the workflow, it's imperative to write unittests for tasks. This can help proactively solve any problems with resolving options.

The **pbsmrtpipe.pb_tasks.tests** python subpackage has several tests and takes ~ second to run.

Stylistically similar to testkit, there's a base class that has class vars that represent the task inputs and outputs.


.. literalinclude:: ../pbsmrtpipe/pb_tasks/tests/test_dev_simple.py
    :language: py


Running
-------

Individual tasks tests (or test classes) can be run using the standard nosetests interface.

.. code-block:: bash

    (dev_pbsmrtpipe_test)pbsmrtpipe $> nosetests  --verbose --logging-config nose.cfg pbsmrtpipe/pb_tasks/tests/test_dev_simple.py
    test_ncommands (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_ncommands_type (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_resolved_nproc (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_resolved_options (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_id (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_options (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_task_type (test_dev_simple.TestDevSimpleTaskDefaults) ... ok
    test_ncommands (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_ncommands_type (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_resolved_nproc (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_resolved_options (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_id (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_options (test_dev_simple.TestTestDevSimpleTask) ... ok
    test_task_type (test_dev_simple.TestTestDevSimpleTask) ... ok

    ----------------------------------------------------------------------
    Ran 14 tests in 0.051s

    OK

The log file will be written to report_unittests.log, which will contain details about the dependency injection resolving and will log the actual commands generated by the task.

Run all the tests by running

.. code-block:: bash

    (dev_pbsmrtpipe_test)pbsmrtpipe $> nosetests  --logging-config nose.cfg pbsmrtpipe/pb_tasks/tests/
    ................................................................................................................................................................................
    ----------------------------------------------------------------------
    Ran 176 tests in 0.739s

    OK
